# 工作流的名称，会显示在 GitHub Actions 的 UI 界面上
name: Java CI with Maven

# 触发工作流的事件
on:
  push:
    branches: [ "main", "dev" ] # 当代码被 push到 main 或 dev 分支时触发
  pull_request:
    branches: [ "main", "dev" ] # 当有 pull request 提交到 main 或 dev 分支时触发

# 工作流包含的任务（jobs）
jobs:
  # 任务的 ID，可以自定义，这里我们叫它 "build"
  build:
    # 指定运行此任务的虚拟机环境，"ubuntu-latest" 是一个常用的、预装了很多工具的 Linux 环境
    runs-on: ubuntu-latest

    # 任务的执行步骤（steps）
    steps:
      # 第一步：检出你的代码
      # 使用官方的 actions/checkout@v3 动作
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：设置 Java 环境
      # 使用了官方的 actions/setup-java@v4 动作
      # 根据你的项目需求，可以修改 'java-version'
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven' # 启用 Maven 依赖缓存，可以加速后续构建

      # 第三步：构建父项目和公共模块
      - name: Build parent and common module
        run: mvn clean install -pl :distribution-system,:common -DskipTests

      # 第四步：构建和测试 auth-service
      - name: Build and test auth-service
        run: |
          cd auth-service
          mvn clean package
          
      # 第五步：验证构建产物
      - name: Verify build artifacts
        run: |
          echo "Checking build artifacts..."
          ls -la auth-service/target/
          if [ ! -f auth-service/target/auth-service-1.0-SNAPSHOT.jar ]; then
            echo "Build failed: auth-service JAR not found"
            exit 1
          fi
